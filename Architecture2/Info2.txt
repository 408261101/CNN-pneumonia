1.神經結構：
class DeepCNN(nn.Module):
    def __init__(self):
        super(DeepCNN, self).__init__()
        # 定義卷積層
        self.conv1 = nn.Conv2d(in_channels=3, out_channels=32, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, padding=1)
        self.conv3 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, padding=1)
        self.conv4 = nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, padding=1)

        # 定義池化層
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)

        # 定義全連接層
        # 調整全連接層的输入特征数
        self.fc1 = nn.Linear(in_features=256 * 64 * 64, out_features=256)
        self.fc2 = nn.Linear(in_features=256, out_features=128)
        self.fc3 = nn.Linear(in_features=128, out_features=2)  # 有2個输出類别

    def forward(self, x):
        # 通過卷積層和激活層
        x = F.relu(self.conv1(x))
        x = F.relu(self.conv2(x))
        # 第一次池化后尺寸變為 128x128
        x = self.pool(x)
        x = F.relu(self.conv3(x))
        x = F.relu(self.conv4(x))
        # 第二次池化后尺寸變為 64x64
        x = self.pool(x)
        # 展平特徵圖以便输入到全連接層
        x = x.view(-1, 256 * 64 * 64)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x


2.模型總參數量
   268857282

3.卷積層參數量
    388416

4.全連接層參數量
    268468866

5.優化器
    Adam

6.學習率
    0.001